//
//  MidiPlayer.swift
//  DMVariateur
//
//  Created by andy monga on 27/12/2019.
//  Copyright Â© 2019 Facebook. All rights reserved.
//

import Foundation
import AudioKit
let speedIndex = 0
let depthIndex = 1

@objc(MidiPlayer)
class MidiPlayer: NSObject {
    
    @objc static func requiresMainQueueSetup() -> Bool {
        return false
    }
    var seq: AKAppleSequencer!
    var sampler = AKMIDISampler()
    var mixer = AKMixer()
    var filter: AKMoogLadder?
    var reverb: AKReverb!
    var delay: AKDelay!
    var pulse = 0.23
    let oscBank = AKFMOscillatorBank(waveform: AKTable(.triangle),
    attackDuration: 0.01,
    decayDuration: 0.03)

    override init() {
      super.init()
    }
    @objc func initPlayer(_ fileUrl: NSString) {
      setUpSequencer(fileUrl)
    }
    fileprivate func setUpSequencer(_ fileUrl: NSString) {

        reverb = AKReverb(sampler)
        reverb.loadFactoryPreset(.smallRoom)
        reverb.dryWetMix = 0
        
        mixer = AKMixer(reverb)
        oscBank >>> mixer
        AudioKit.output = mixer
        AKSettings.playbackWhileMuted = true
        
        seq = AKAppleSequencer(fromURL: NSURL(fileURLWithPath: fileUrl as String) as URL)
                
        seq.enableLooping()
        seq.setGlobalMIDIOutput(sampler.midiIn)
        seq.setTempo(120)
        sampler.volume = 1
        seq.preroll()
        do {
            try sampler.loadSoundFont("Giga Piano", preset: 0 , bank: 0)
            
        } catch {
            AKLog("A file was not found.")
        }
        do {
            try AudioKit.start()
        } catch {
            AKLog("Couldn't start AudioKit")
        }
    }
    
    @objc func adjustVolume(_ volume: NSNumber) -> Void {
      print(volume)
      let vol = RCTConvert.double(volume) * 2.0 // useful for gain
      print(vol)
      sampler.volume = vol
    }
    
    @objc func play() {
      if(!seq.isPlaying) {
        seq.play()
      }
      else {
        
        self.pause()
      }
      print("tempo ******************")
      print(seq.tempo)
      print("currentPosition ******************")
      print(seq.currentPosition.samples/seq.currentPosition.sampleRate)
      print("currentRelativePosition ******************")
      print(seq.currentRelativePosition.musicTimeStamp)
    }
    
    @objc func pause() {
        seq.stop()
    }
    
    @objc func stop() {
        seq.stop()
        seq.rewind()
    }
    
    @objc func setTempo(_ tempo: NSNumber) {
        seq.setTempo(RCTConvert.double(tempo))
        print("tempo ******************")
        print(seq.tempo)
        print("currentPosition ******************")
        print(seq.currentPosition)
        print("currentRelativePosition ******************")
        print(seq.currentRelativePosition)
    }
  
    @objc func setSoundFont(_ sound: NSString) {
        do {
           try sampler.loadSoundFont(sound as String, preset: 0 , bank: 0)
        } catch {
            AKLog("Could not load SF2")
        }
    }
  
    @objc func setReverb(_ preset: NSString) {
      reverb.dryWetMix = 0.5
      switch preset {
        case "No reverb":
            reverb.dryWetMix = 0
        case "Cathedral":
            reverb.loadFactoryPreset(.cathedral)
        case "Large Hall":
            reverb.loadFactoryPreset(.largeHall)
        case "Large Hall 2":
            reverb.loadFactoryPreset(.largeHall2)
        case "Large Room":
            reverb.loadFactoryPreset(.largeRoom)
        case "Large Room 2":
            reverb.loadFactoryPreset(.largeRoom2)
        case "Medium Chamber":
            reverb.loadFactoryPreset(.mediumChamber)
        case "Medium Hall":
            reverb.loadFactoryPreset(.mediumHall)
        case "Medium Hall 2":
            reverb.loadFactoryPreset(.mediumHall2)
        case "Medium Hall 3":
            reverb.loadFactoryPreset(.mediumHall3)
        case "Medium Room":
            reverb.loadFactoryPreset(.mediumRoom)
        case "Plate":
            reverb.loadFactoryPreset(.plate)
        case "Small Room":
            reverb.loadFactoryPreset(.smallRoom)
        default:
            break
      }
    }
}
