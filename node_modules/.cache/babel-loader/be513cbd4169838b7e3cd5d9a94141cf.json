{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * Constants used in player.\n */\n\n\nvar Constants = {\n  VERSION: '2.0.14',\n  NOTES: [],\n  HEADER_CHUNK_LENGTH: 14,\n  CIRCLE_OF_FOURTHS: ['C', 'F', 'Bb', 'Eb', 'Ab', 'Db', 'Gb', 'Cb', 'Fb', 'Bbb', 'Ebb', 'Abb'],\n  CIRCLE_OF_FIFTHS: ['C', 'G', 'D', 'A', 'E', 'B', 'F#', 'C#', 'G#', 'D#', 'A#', 'E#']\n}; // Builds notes object for reference against binary values.\n\nvar allNotes = [['C'], ['C#', 'Db'], ['D'], ['D#', 'Eb'], ['E'], ['F'], ['F#', 'Gb'], ['G'], ['G#', 'Ab'], ['A'], ['A#', 'Bb'], ['B']];\nvar counter = 0; // All available octaves.\n\nvar _loop = function _loop(i) {\n  allNotes.forEach(function (noteGroup) {\n    noteGroup.forEach(function (note) {\n      return Constants.NOTES[counter] = note + i;\n    });\n    counter++;\n  });\n};\n\nfor (var i = -1; i <= 9; i++) {\n  _loop(i);\n}\n/**\n * Contains misc static utility methods.\n */\n\n\nvar Utils = /*#__PURE__*/function () {\n  function Utils() {\n    _classCallCheck(this, Utils);\n  }\n\n  _createClass(Utils, null, [{\n    key: \"byteToHex\",\n\n    /**\n     * Converts a single byte to a hex string.\n     * @param {number} byte\n     * @return {string}\n     */\n    value: function byteToHex(_byte) {\n      // Ensure hex string always has two chars\n      return ('0' + _byte.toString(16)).slice(-2);\n    }\n    /**\n     * Converts an array of bytes to a hex string.\n     * @param {array} byteArray\n     * @return {string}\n     */\n\n  }, {\n    key: \"bytesToHex\",\n    value: function bytesToHex(byteArray) {\n      var hex = [];\n      byteArray.forEach(function (_byte2) {\n        return hex.push(Utils.byteToHex(_byte2));\n      });\n      return hex.join('');\n    }\n    /**\n     * Converts a hex string to a number.\n     * @param {string} hexString\n     * @return {number}\n     */\n\n  }, {\n    key: \"hexToNumber\",\n    value: function hexToNumber(hexString) {\n      return parseInt(hexString, 16);\n    }\n    /**\n     * Converts an array of bytes to a number.\n     * @param {array} byteArray\n     * @return {number}\n     */\n\n  }, {\n    key: \"bytesToNumber\",\n    value: function bytesToNumber(byteArray) {\n      return Utils.hexToNumber(Utils.bytesToHex(byteArray));\n    }\n    /**\n     * Converts an array of bytes to letters.\n     * @param {array} byteArray\n     * @return {string}\n     */\n\n  }, {\n    key: \"bytesToLetters\",\n    value: function bytesToLetters(byteArray) {\n      var letters = [];\n      byteArray.forEach(function (_byte3) {\n        return letters.push(String.fromCharCode(_byte3));\n      });\n      return letters.join('');\n    }\n    /**\n     * Converts a decimal to it's binary representation.\n     * @param {number} dec\n     * @return {string}\n     */\n\n  }, {\n    key: \"decToBinary\",\n    value: function decToBinary(dec) {\n      return (dec >>> 0).toString(2);\n    }\n    /**\n     * Determines the length in bytes of a variable length quaantity.  The first byte in given range is assumed to be beginning of var length quantity.\n     * @param {array} byteArray\n     * @return {number}\n     */\n\n  }, {\n    key: \"getVarIntLength\",\n    value: function getVarIntLength(byteArray) {\n      // Get byte count of delta VLV\n      // http://www.ccarh.org/courses/253/handout/vlv/\n      // If byte is greater or equal to 80h (128 decimal) then the next byte\n      // is also part of the VLV,\n      // else byte is the last byte in a VLV.\n      var currentByte = byteArray[0];\n      var byteCount = 1;\n\n      while (currentByte >= 128) {\n        currentByte = byteArray[byteCount];\n        byteCount++;\n      }\n\n      return byteCount;\n    }\n    /**\n     * Reads a variable length value.\n     * @param {array} byteArray\n     * @return {number}\n     */\n\n  }, {\n    key: \"readVarInt\",\n    value: function readVarInt(byteArray) {\n      var result = 0;\n      byteArray.forEach(function (number) {\n        var b = number;\n\n        if (b & 0x80) {\n          result += b & 0x7f;\n          result <<= 7;\n        } else {\n          /* b is the last byte */\n          result += b;\n        }\n      });\n      return result;\n    }\n    /**\n     * Decodes base-64 encoded string\n     * @param {string} string\n     * @return {string}\n     */\n\n  }, {\n    key: \"atob\",\n    value: function (_atob) {\n      function atob(_x) {\n        return _atob.apply(this, arguments);\n      }\n\n      atob.toString = function () {\n        return _atob.toString();\n      };\n\n      return atob;\n    }(function (string) {\n      if (typeof atob === 'function') return atob(string);\n      return new Buffer(string, 'base64').toString('binary');\n    })\n  }]);\n\n  return Utils;\n}();\n/**\n * Class representing a track.  Contains methods for parsing events and keeping track of pointer.\n */\n\n\nvar Track = /*#__PURE__*/function () {\n  function Track(index, data) {\n    _classCallCheck(this, Track);\n\n    this.enabled = true;\n    this.eventIndex = 0;\n    this.pointer = 0;\n    this.lastTick = 0;\n    this.lastStatus = null;\n    this.index = index;\n    this.data = data;\n    this.delta = 0;\n    this.runningDelta = 0;\n    this.events = []; // Ensure last 3 bytes of track are End of Track event\n\n    var lastThreeBytes = this.data.subarray(this.data.length - 3, this.data.length);\n\n    if (!(lastThreeBytes[0] === 0xff && lastThreeBytes[1] === 0x2f && lastThreeBytes[2] === 0x00)) {\n      throw 'Invalid MIDI file; Last three bytes of track ' + this.index + 'must be FF 2F 00 to mark end of track';\n    }\n  }\n  /**\n   * Resets all stateful track informaion used during playback.\n   * @return {Track}\n   */\n\n\n  _createClass(Track, [{\n    key: \"reset\",\n    value: function reset() {\n      this.enabled = true;\n      this.eventIndex = 0;\n      this.pointer = 0;\n      this.lastTick = 0;\n      this.lastStatus = null;\n      this.delta = 0;\n      this.runningDelta = 0;\n      return this;\n    }\n    /**\n     * Sets this track to be enabled during playback.\n     * @return {Track}\n     */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      this.enabled = true;\n      return this;\n    }\n    /**\n     * Sets this track to be disabled during playback.\n     * @return {Track}\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.enabled = false;\n      return this;\n    }\n    /**\n     * Sets the track event index to the nearest event to the given tick.\n     * @param {number} tick\n     * @return {Track}\n     */\n\n  }, {\n    key: \"setEventIndexByTick\",\n    value: function setEventIndexByTick(tick) {\n      tick = tick || 0;\n\n      for (var i in this.events) {\n        if (this.events[i].tick >= tick) {\n          this.eventIndex = i;\n          return this;\n        }\n      }\n    }\n    /**\n     * Gets byte located at pointer position.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getCurrentByte\",\n    value: function getCurrentByte() {\n      return this.data[this.pointer];\n    }\n    /**\n     * Gets count of delta bytes and current pointer position.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getDeltaByteCount\",\n    value: function getDeltaByteCount() {\n      return Utils.getVarIntLength(this.data.subarray(this.pointer));\n    }\n    /**\n     * Get delta value at current pointer position.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getDelta\",\n    value: function getDelta() {\n      return Utils.readVarInt(this.data.subarray(this.pointer, this.pointer + this.getDeltaByteCount()));\n    }\n    /**\n     * Handles event within a given track starting at specified index\n     * @param {number} currentTick\n     * @param {boolean} dryRun - If true events will be parsed and returned regardless of time.\n     */\n\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(currentTick, dryRun) {\n      dryRun = dryRun || false;\n\n      if (dryRun) {\n        var elapsedTicks = currentTick - this.lastTick;\n        var delta = this.getDelta();\n        var eventReady = elapsedTicks >= delta;\n\n        if (this.pointer < this.data.length && (dryRun || eventReady)) {\n          var _event = this.parseEvent();\n\n          if (this.enabled) return _event; // Recursively call this function for each event ahead that has 0 delta time?\n        }\n      } else {\n        // Let's actually play the MIDI from the generated JSON events created by the dry run.\n        if (this.events[this.eventIndex] && this.events[this.eventIndex].tick <= currentTick) {\n          this.eventIndex++;\n          if (this.enabled) return this.events[this.eventIndex - 1];\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Get string data from event.\n     * @param {number} eventStartIndex\n     * @return {string}\n     */\n\n  }, {\n    key: \"getStringData\",\n    value: function getStringData(eventStartIndex) {\n      var varIntLength = Utils.getVarIntLength(this.data.subarray(eventStartIndex + 2));\n      var varIntValue = Utils.readVarInt(this.data.subarray(eventStartIndex + 2, eventStartIndex + 2 + varIntLength));\n      var letters = Utils.bytesToLetters(this.data.subarray(eventStartIndex + 2 + varIntLength, eventStartIndex + 2 + varIntLength + varIntValue));\n      return letters;\n    }\n    /**\n     * Parses event into JSON and advances pointer for the track\n     * @return {object}\n     */\n\n  }, {\n    key: \"parseEvent\",\n    value: function parseEvent() {\n      var eventStartIndex = this.pointer + this.getDeltaByteCount();\n      var eventJson = {};\n      var deltaByteCount = this.getDeltaByteCount();\n      eventJson.track = this.index + 1;\n      eventJson.delta = this.getDelta();\n      this.lastTick = this.lastTick + eventJson.delta;\n      this.runningDelta += eventJson.delta;\n      eventJson.tick = this.runningDelta;\n      eventJson.byteIndex = this.pointer; //eventJson.raw = event;\n\n      if (this.data[eventStartIndex] == 0xff) {\n        // Meta Event\n        // If this is a meta event we should emit the data and immediately move to the next event\n        // otherwise if we let it run through the next cycle a slight delay will accumulate if multiple tracks\n        // are being played simultaneously\n        switch (this.data[eventStartIndex + 1]) {\n          case 0x00:\n            // Sequence Number\n            eventJson.name = 'Sequence Number';\n            break;\n\n          case 0x01:\n            // Text Event\n            eventJson.name = 'Text Event';\n            eventJson.string = this.getStringData(eventStartIndex);\n            break;\n\n          case 0x02:\n            // Copyright Notice\n            eventJson.name = 'Copyright Notice';\n            break;\n\n          case 0x03:\n            // Sequence/Track Name\n            eventJson.name = 'Sequence/Track Name';\n            eventJson.string = this.getStringData(eventStartIndex);\n            break;\n\n          case 0x04:\n            // Instrument Name\n            eventJson.name = 'Instrument Name';\n            eventJson.string = this.getStringData(eventStartIndex);\n            break;\n\n          case 0x05:\n            // Lyric\n            eventJson.name = 'Lyric';\n            eventJson.string = this.getStringData(eventStartIndex);\n            break;\n\n          case 0x06:\n            // Marker\n            eventJson.name = 'Marker';\n            break;\n\n          case 0x07:\n            // Cue Point\n            eventJson.name = 'Cue Point';\n            eventJson.string = this.getStringData(eventStartIndex);\n            break;\n\n          case 0x09:\n            // Device Name\n            eventJson.name = 'Device Name';\n            eventJson.string = this.getStringData(eventStartIndex);\n            break;\n\n          case 0x20:\n            // MIDI Channel Prefix\n            eventJson.name = 'MIDI Channel Prefix';\n            break;\n\n          case 0x21:\n            // MIDI Port\n            eventJson.name = 'MIDI Port';\n            eventJson.data = Utils.bytesToNumber([this.data[eventStartIndex + 3]]);\n            break;\n\n          case 0x2F:\n            // End of Track\n            eventJson.name = 'End of Track';\n            break;\n\n          case 0x51:\n            // Set Tempo\n            eventJson.name = 'Set Tempo';\n            eventJson.data = Math.round(60000000 / Utils.bytesToNumber(this.data.subarray(eventStartIndex + 3, eventStartIndex + 6)));\n            this.tempo = eventJson.data;\n            break;\n\n          case 0x54:\n            // SMTPE Offset\n            eventJson.name = 'SMTPE Offset';\n            break;\n\n          case 0x58:\n            // Time Signature\n            // FF 58 04 nn dd cc bb\n            eventJson.name = 'Time Signature';\n            eventJson.data = this.data.subarray(eventStartIndex + 3, eventStartIndex + 7);\n            eventJson.timeSignature = \"\" + eventJson.data[0] + \"/\" + Math.pow(2, eventJson.data[1]);\n            break;\n\n          case 0x59:\n            // Key Signature\n            // FF 59 02 sf mi\n            eventJson.name = 'Key Signature';\n            eventJson.data = this.data.subarray(eventStartIndex + 3, eventStartIndex + 5);\n\n            if (eventJson.data[0] >= 0) {\n              eventJson.keySignature = Constants.CIRCLE_OF_FIFTHS[eventJson.data[0]];\n            } else if (eventJson.data[0] < 0) {\n              eventJson.keySignature = Constants.CIRCLE_OF_FOURTHS[Math.abs(eventJson.data[0])];\n            }\n\n            if (eventJson.data[1] == 0) {\n              eventJson.keySignature += \" Major\";\n            } else if (eventJson.data[1] == 1) {\n              eventJson.keySignature += \" Minor\";\n            }\n\n            break;\n\n          case 0x7F:\n            // Sequencer-Specific Meta-event\n            eventJson.name = 'Sequencer-Specific Meta-event';\n            break;\n\n          default:\n            eventJson.name = 'Unknown: ' + this.data[eventStartIndex + 1].toString(16);\n            break;\n        }\n\n        var varIntLength = Utils.getVarIntLength(this.data.subarray(eventStartIndex + 2));\n        var length = Utils.readVarInt(this.data.subarray(eventStartIndex + 2, eventStartIndex + 2 + varIntLength)); //console.log(eventJson);\n\n        this.pointer += deltaByteCount + 3 + length; //console.log(eventJson);\n      } else if (this.data[eventStartIndex] === 0xf0) {\n        // Sysex\n        eventJson.name = 'Sysex';\n        var varQuantityByteLength = Utils.getVarIntLength(this.data.subarray(eventStartIndex + 1));\n        var varQuantityByteValue = Utils.readVarInt(this.data.subarray(eventStartIndex + 1, eventStartIndex + 1 + varQuantityByteLength));\n        eventJson.data = this.data.subarray(eventStartIndex + 1 + varQuantityByteLength, eventStartIndex + 1 + varQuantityByteLength + varQuantityByteValue);\n        this.pointer += deltaByteCount + 1 + varQuantityByteLength + varQuantityByteValue;\n      } else if (this.data[eventStartIndex] === 0xf7) {\n        // Sysex (escape)\n        // http://www.somascape.org/midi/tech/mfile.html#sysex\n        eventJson.name = 'Sysex (escape)';\n\n        var _varQuantityByteLength = Utils.getVarIntLength(this.data.subarray(eventStartIndex + 1));\n\n        var _varQuantityByteValue = Utils.readVarInt(this.data.subarray(eventStartIndex + 1, eventStartIndex + 1 + _varQuantityByteLength));\n\n        eventJson.data = this.data.subarray(eventStartIndex + 1 + _varQuantityByteLength, eventStartIndex + 1 + _varQuantityByteLength + _varQuantityByteValue);\n        this.pointer += deltaByteCount + 1 + _varQuantityByteLength + _varQuantityByteValue;\n      } else {\n        // Voice event\n        if (this.data[eventStartIndex] < 0x80) {\n          // Running status\n          eventJson.running = true;\n          eventJson.noteNumber = this.data[eventStartIndex];\n          eventJson.noteName = Constants.NOTES[this.data[eventStartIndex]];\n          eventJson.velocity = this.data[eventStartIndex + 1];\n\n          if (this.lastStatus <= 0x8f) {\n            eventJson.name = 'Note off';\n            eventJson.channel = this.lastStatus - 0x80 + 1;\n            this.pointer += deltaByteCount + 2;\n          } else if (this.lastStatus <= 0x9f) {\n            eventJson.name = 'Note on';\n            eventJson.channel = this.lastStatus - 0x90 + 1;\n            this.pointer += deltaByteCount + 2;\n          } else if (this.lastStatus <= 0xaf) {\n            // Polyphonic Key Pressure\n            eventJson.name = 'Polyphonic Key Pressure';\n            eventJson.channel = this.lastStatus - 0xa0 + 1;\n            eventJson.note = Constants.NOTES[this.data[eventStartIndex + 1]];\n            eventJson.pressure = event[1];\n            this.pointer += deltaByteCount + 2;\n          } else if (this.lastStatus <= 0xbf) {\n            // Controller Change\n            eventJson.name = 'Controller Change';\n            eventJson.channel = this.lastStatus - 0xb0 + 1;\n            eventJson.number = this.data[eventStartIndex + 1];\n            eventJson.value = this.data[eventStartIndex + 2];\n            this.pointer += deltaByteCount + 2;\n          } else if (this.lastStatus <= 0xcf) {\n            // Program Change\n            eventJson.name = 'Program Change';\n            eventJson.channel = this.lastStatus - 0xc0 + 1;\n            eventJson.value = this.data[eventStartIndex + 1];\n            this.pointer += deltaByteCount + 1;\n          } else if (this.lastStatus <= 0xdf) {\n            // Channel Key Pressure\n            eventJson.name = 'Channel Key Pressure';\n            eventJson.channel = this.lastStatus - 0xd0 + 1;\n            this.pointer += deltaByteCount + 1;\n          } else if (this.lastStatus <= 0xef) {\n            // Pitch Bend\n            eventJson.name = 'Pitch Bend';\n            eventJson.channel = this.lastStatus - 0xe0 + 1;\n            this.pointer += deltaByteCount + 2;\n          } else {\n            throw \"Unknown event (running): \".concat(this.lastStatus);\n          }\n        } else {\n          this.lastStatus = this.data[eventStartIndex];\n\n          if (this.data[eventStartIndex] <= 0x8f) {\n            // Note off\n            eventJson.name = 'Note off';\n            eventJson.channel = this.lastStatus - 0x80 + 1;\n            eventJson.noteNumber = this.data[eventStartIndex + 1];\n            eventJson.noteName = Constants.NOTES[this.data[eventStartIndex + 1]];\n            eventJson.velocity = Math.round(this.data[eventStartIndex + 2] / 127 * 100);\n            this.pointer += deltaByteCount + 3;\n          } else if (this.data[eventStartIndex] <= 0x9f) {\n            // Note on\n            eventJson.name = 'Note on';\n            eventJson.channel = this.lastStatus - 0x90 + 1;\n            eventJson.noteNumber = this.data[eventStartIndex + 1];\n            eventJson.noteName = Constants.NOTES[this.data[eventStartIndex + 1]];\n            eventJson.velocity = Math.round(this.data[eventStartIndex + 2] / 127 * 100);\n            this.pointer += deltaByteCount + 3;\n          } else if (this.data[eventStartIndex] <= 0xaf) {\n            // Polyphonic Key Pressure\n            eventJson.name = 'Polyphonic Key Pressure';\n            eventJson.channel = this.lastStatus - 0xa0 + 1;\n            eventJson.note = Constants.NOTES[this.data[eventStartIndex + 1]];\n            eventJson.pressure = event[2];\n            this.pointer += deltaByteCount + 3;\n          } else if (this.data[eventStartIndex] <= 0xbf) {\n            // Controller Change\n            eventJson.name = 'Controller Change';\n            eventJson.channel = this.lastStatus - 0xb0 + 1;\n            eventJson.number = this.data[eventStartIndex + 1];\n            eventJson.value = this.data[eventStartIndex + 2];\n            this.pointer += deltaByteCount + 3;\n          } else if (this.data[eventStartIndex] <= 0xcf) {\n            // Program Change\n            eventJson.name = 'Program Change';\n            eventJson.channel = this.lastStatus - 0xc0 + 1;\n            eventJson.value = this.data[eventStartIndex + 1];\n            this.pointer += deltaByteCount + 2;\n          } else if (this.data[eventStartIndex] <= 0xdf) {\n            // Channel Key Pressure\n            eventJson.name = 'Channel Key Pressure';\n            eventJson.channel = this.lastStatus - 0xd0 + 1;\n            this.pointer += deltaByteCount + 2;\n          } else if (this.data[eventStartIndex] <= 0xef) {\n            // Pitch Bend\n            eventJson.name = 'Pitch Bend';\n            eventJson.channel = this.lastStatus - 0xe0 + 1;\n            this.pointer += deltaByteCount + 3;\n          } else {\n            throw \"Unknown event: \".concat(this.data[eventStartIndex]); //eventJson.name = `Unknown.  Pointer: ${this.pointer.toString()}, ${eventStartIndex.toString()}, ${this.data[eventStartIndex]}, ${this.data.length}`;\n          }\n        }\n      }\n\n      this.delta += eventJson.delta;\n      this.events.push(eventJson);\n      return eventJson;\n    }\n    /**\n     * Returns true if pointer has reached the end of the track.\n     * @param {boolean}\n     */\n\n  }, {\n    key: \"endOfTrack\",\n    value: function endOfTrack() {\n      if (this.data[this.pointer + 1] == 0xff && this.data[this.pointer + 2] == 0x2f && this.data[this.pointer + 3] == 0x00) {\n        return true;\n      }\n\n      return false;\n    }\n  }]);\n\n  return Track;\n}();\n\nif (!Uint8Array.prototype.forEach) {\n  Object.defineProperty(Uint8Array.prototype, 'forEach', {\n    value: Array.prototype.forEach\n  });\n}\n/**\n * Main player class.  Contains methods to load files, start, stop.\n * @param {function} - Callback to fire for each MIDI event.  Can also be added with on('midiEvent', fn)\n * @param {array} - Array buffer of MIDI file (optional).\n */\n\n\nvar Player = /*#__PURE__*/function () {\n  function Player(eventHandler, buffer) {\n    _classCallCheck(this, Player);\n\n    this.sampleRate = 5; // milliseconds\n\n    this.startTime = 0;\n    this.buffer = buffer || null;\n    this.midiChunksByteLength = null;\n    this.division;\n    this.format;\n    this.setIntervalId = false;\n    this.tracks = [];\n    this.instruments = [];\n    this.defaultTempo = 120;\n    this.tempo = null;\n    this.startTick = 0;\n    this.tick = 0;\n    this.lastTick = null;\n    this.inLoop = false;\n    this.totalTicks = 0;\n    this.events = [];\n    this.totalEvents = 0;\n    this.eventListeners = {};\n    if (typeof eventHandler === 'function') this.on('midiEvent', eventHandler);\n  }\n  /**\n   * Load a file into the player (Node.js only).\n   * @param {string} path - Path of file.\n   * @return {Player}\n   */\n\n\n  _createClass(Player, [{\n    key: \"loadFile\",\n    value: function loadFile(path) {\n      {\n        throw 'loadFile is only supported on Node.js';\n      }\n    }\n    /**\n     * Load an array buffer into the player.\n     * @param {array} arrayBuffer - Array buffer of file to be loaded.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"loadArrayBuffer\",\n    value: function loadArrayBuffer(arrayBuffer) {\n      this.buffer = new Uint8Array(arrayBuffer);\n      return this.fileLoaded();\n    }\n    /**\n     * Load a data URI into the player.\n     * @param {string} dataUri - Data URI to be loaded.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"loadDataUri\",\n    value: function loadDataUri(dataUri) {\n      // convert base64 to raw binary data held in a string.\n      // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this\n      var byteString = Utils.atob(dataUri.split(',')[1]); // write the bytes of the string to an ArrayBuffer\n\n      var ia = new Uint8Array(byteString.length);\n\n      for (var i = 0; i < byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i);\n      }\n\n      this.buffer = ia;\n      return this.fileLoaded();\n    }\n    /**\n     * Get filesize of loaded file in number of bytes.\n     * @return {number} - The filesize.\n     */\n\n  }, {\n    key: \"getFilesize\",\n    value: function getFilesize() {\n      return this.buffer ? this.buffer.length : 0;\n    }\n    /**\n     * Sets default tempo, parses file for necessary information, and does a dry run to calculate total length.\n     * Populates this.events & this.totalTicks.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"fileLoaded\",\n    value: function fileLoaded() {\n      if (!this.validate()) throw 'Invalid MIDI file; should start with MThd';\n      return this.setTempo(this.defaultTempo).getDivision().getFormat().getTracks().dryRun();\n    }\n    /**\n     * Validates file using simple means - first four bytes should == MThd.\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      //console.log((this.buffer.subarray(0, 15)));\n      return Utils.bytesToLetters(this.buffer.subarray(0, 4)) === 'MThd';\n    }\n    /**\n     * Gets MIDI file format for loaded file.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"getFormat\",\n    value: function getFormat() {\n      /*\n      MIDI files come in 3 variations:\n      Format 0 which contain a single track\n      Format 1 which contain one or more simultaneous tracks\n      (ie all tracks are to be played simultaneously).\n      Format 2 which contain one or more independant tracks\n      (ie each track is to be played independantly of the others).\n      return Utils.bytesToNumber(this.buffer.subarray(8, 10));\n      */\n      this.format = Utils.bytesToNumber(this.buffer.subarray(8, 10));\n      return this;\n    }\n    /**\n     * Parses out tracks, places them in this.tracks and initializes this.pointers\n     * @return {Player}\n     */\n\n  }, {\n    key: \"getTracks\",\n    value: function getTracks() {\n      this.tracks = [];\n      var trackOffset = 0;\n\n      while (trackOffset < this.buffer.length) {\n        if (Utils.bytesToLetters(this.buffer.subarray(trackOffset, trackOffset + 4)) == 'MTrk') {\n          var trackLength = Utils.bytesToNumber(this.buffer.subarray(trackOffset + 4, trackOffset + 8));\n          this.tracks.push(new Track(this.tracks.length, this.buffer.subarray(trackOffset + 8, trackOffset + 8 + trackLength)));\n        }\n\n        trackOffset += Utils.bytesToNumber(this.buffer.subarray(trackOffset + 4, trackOffset + 8)) + 8;\n      } // Get sum of all MIDI chunks here while we're at it\n\n\n      var trackChunksByteLength = 0;\n      this.tracks.forEach(function (track) {\n        trackChunksByteLength += 8 + track.data.length;\n      });\n      this.midiChunksByteLength = Constants.HEADER_CHUNK_LENGTH + trackChunksByteLength;\n      return this;\n    }\n    /**\n     * Enables a track for playing.\n     * @param {number} trackNumber - Track number\n     * @return {Player}\n     */\n\n  }, {\n    key: \"enableTrack\",\n    value: function enableTrack(trackNumber) {\n      this.tracks[trackNumber - 1].enable();\n      return this;\n    }\n    /**\n     * Disables a track for playing.\n     * @param {number} - Track number\n     * @return {Player}\n     */\n\n  }, {\n    key: \"disableTrack\",\n    value: function disableTrack(trackNumber) {\n      this.tracks[trackNumber - 1].disable();\n      return this;\n    }\n    /**\n     * Gets quarter note division of loaded MIDI file.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"getDivision\",\n    value: function getDivision() {\n      this.division = Utils.bytesToNumber(this.buffer.subarray(12, Constants.HEADER_CHUNK_LENGTH));\n      return this;\n    }\n    /**\n     * The main play loop.\n     * @param {boolean} - Indicates whether or not this is being called simply for parsing purposes.  Disregards timing if so.\n     * @return {undefined}\n     */\n\n  }, {\n    key: \"playLoop\",\n    value: function playLoop(dryRun) {\n      if (!this.inLoop) {\n        this.inLoop = true;\n        this.tick = this.getCurrentTick();\n        this.tracks.forEach(function (track, index) {\n          // Handle next event\n          if (!dryRun && this.endOfFile()) {\n            //console.log('end of file')\n            this.triggerPlayerEvent('endOfFile');\n            this.stop();\n          } else {\n            var event = track.handleEvent(this.tick, dryRun);\n\n            if (dryRun && event) {\n              if (event.hasOwnProperty('name') && event.name === 'Set Tempo') {\n                // Grab tempo if available.\n                this.defaultTempo = event.data;\n                this.setTempo(event.data);\n              }\n\n              if (event.hasOwnProperty('name') && event.name === 'Program Change') {\n                if (!this.instruments.includes(event.value)) {\n                  this.instruments.push(event.value);\n                }\n              }\n            } else if (event) {\n              if (event.hasOwnProperty('name') && event.name === 'Set Tempo') {\n                // Grab tempo if available.\n                this.setTempo(event.data);\n\n                if (this.isPlaying()) {\n                  this.pause().play();\n                }\n              }\n\n              this.emitEvent(event);\n            }\n          }\n        }, this);\n        if (!dryRun) this.triggerPlayerEvent('playing', {\n          tick: this.tick\n        });\n        this.inLoop = false;\n      }\n    }\n    /**\n     * Setter for tempo.\n     * @param {number} - Tempo in bpm (defaults to 120)\n     */\n\n  }, {\n    key: \"setTempo\",\n    value: function setTempo(tempo) {\n      this.tempo = tempo;\n      return this;\n    }\n    /**\n     * Setter for startTime.\n     * @param {number} - UTC timestamp\n     * @return {Player}\n     */\n\n  }, {\n    key: \"setStartTime\",\n    value: function setStartTime(startTime) {\n      this.startTime = startTime;\n      return this;\n    }\n    /**\n     * Start playing loaded MIDI file if not already playing.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"play\",\n    value: function play() {\n      if (this.isPlaying()) throw 'Already playing...'; // Initialize\n\n      if (!this.startTime) this.startTime = new Date().getTime(); // Start play loop\n      //window.requestAnimationFrame(this.playLoop.bind(this));\n\n      this.setIntervalId = setInterval(this.playLoop.bind(this), this.sampleRate); //this.setIntervalId = this.loop();\n\n      return this;\n    }\n  }, {\n    key: \"loop\",\n    value: function loop() {\n      setTimeout(function () {\n        // Do Something Here\n        this.playLoop(); // Then recall the parent function to\n        // create a recursive loop.\n\n        this.loop();\n      }.bind(this), this.sampleRate);\n    }\n    /**\n     * Pauses playback if playing.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      clearInterval(this.setIntervalId);\n      this.setIntervalId = false;\n      this.startTick = this.tick;\n      this.startTime = 0;\n      return this;\n    }\n    /**\n     * Stops playback if playing.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      clearInterval(this.setIntervalId);\n      this.setIntervalId = false;\n      this.startTick = 0;\n      this.startTime = 0;\n      this.resetTracks();\n      return this;\n    }\n    /**\n     * Skips player pointer to specified tick.\n     * @param {number} - Tick to skip to.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"skipToTick\",\n    value: function skipToTick(tick) {\n      this.stop();\n      this.startTick = tick; // Need to set track event indexes to the nearest possible event to the specified tick.\n\n      this.tracks.forEach(function (track) {\n        track.setEventIndexByTick(tick);\n      });\n      return this;\n    }\n    /**\n     * Skips player pointer to specified percentage.\n     * @param {number} - Percent value in integer format.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"skipToPercent\",\n    value: function skipToPercent(percent) {\n      if (percent < 0 || percent > 100) throw \"Percent must be number between 1 and 100.\";\n      this.skipToTick(Math.round(percent / 100 * this.totalTicks));\n      return this;\n    }\n    /**\n     * Skips player pointer to specified seconds.\n     * @param {number} - Seconds to skip to.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"skipToSeconds\",\n    value: function skipToSeconds(seconds) {\n      var songTime = this.getSongTime();\n      if (seconds < 0 || seconds > songTime) throw seconds + \" seconds not within song time of \" + songTime;\n      this.skipToPercent(seconds / songTime * 100);\n      return this;\n    }\n    /**\n     * Checks if player is playing\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isPlaying\",\n    value: function isPlaying() {\n      return this.setIntervalId > 0 || _typeof(this.setIntervalId) === 'object';\n    }\n    /**\n     * Plays the loaded MIDI file without regard for timing and saves events in this.events.  Essentially used as a parser.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"dryRun\",\n    value: function dryRun() {\n      // Reset tracks first\n      this.resetTracks();\n\n      while (!this.endOfFile()) {\n        this.playLoop(true); //console.log(this.bytesProcessed(), this.midiChunksByteLength);\n      }\n\n      this.events = this.getEvents();\n      this.totalEvents = this.getTotalEvents();\n      this.totalTicks = this.getTotalTicks();\n      this.startTick = 0;\n      this.startTime = 0; // Leave tracks in pristine condish\n\n      this.resetTracks(); //console.log('Song time: ' + this.getSongTime() + ' seconds / ' + this.totalTicks + ' ticks.');\n\n      this.triggerPlayerEvent('fileLoaded', this);\n      return this;\n    }\n    /**\n     * Resets play pointers for all tracks.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"resetTracks\",\n    value: function resetTracks() {\n      this.tracks.forEach(function (track) {\n        return track.reset();\n      });\n      return this;\n    }\n    /**\n     * Gets an array of events grouped by track.\n     * @return {array}\n     */\n\n  }, {\n    key: \"getEvents\",\n    value: function getEvents() {\n      return this.tracks.map(function (track) {\n        return track.events;\n      });\n    }\n    /**\n     * Gets total number of ticks in the loaded MIDI file.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getTotalTicks\",\n    value: function getTotalTicks() {\n      return Math.max.apply(null, this.tracks.map(function (track) {\n        return track.delta;\n      }));\n    }\n    /**\n     * Gets total number of events in the loaded MIDI file.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getTotalEvents\",\n    value: function getTotalEvents() {\n      return this.tracks.reduce(function (a, b) {\n        return {\n          events: {\n            length: a.events.length + b.events.length\n          }\n        };\n      }, {\n        events: {\n          length: 0\n        }\n      }).events.length;\n    }\n    /**\n     * Gets song duration in seconds.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getSongTime\",\n    value: function getSongTime() {\n      return this.totalTicks / this.division / this.tempo * 60;\n    }\n    /**\n     * Gets remaining number of seconds in playback.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getSongTimeRemaining\",\n    value: function getSongTimeRemaining() {\n      return Math.round((this.totalTicks - this.getCurrentTick()) / this.division / this.tempo * 60);\n    }\n    /**\n     * Gets remaining percent of playback.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getSongPercentRemaining\",\n    value: function getSongPercentRemaining() {\n      return Math.round(this.getSongTimeRemaining() / this.getSongTime() * 100);\n    }\n    /**\n     * Number of bytes processed in the loaded MIDI file.\n     * @return {number}\n     */\n\n  }, {\n    key: \"bytesProcessed\",\n    value: function bytesProcessed() {\n      return Constants.HEADER_CHUNK_LENGTH + this.tracks.length * 8 + this.tracks.reduce(function (a, b) {\n        return {\n          pointer: a.pointer + b.pointer\n        };\n      }, {\n        pointer: 0\n      }).pointer;\n    }\n    /**\n     * Number of events played up to this point.\n     * @return {number}\n     */\n\n  }, {\n    key: \"eventsPlayed\",\n    value: function eventsPlayed() {\n      return this.tracks.reduce(function (a, b) {\n        return {\n          eventIndex: a.eventIndex + b.eventIndex\n        };\n      }, {\n        eventIndex: 0\n      }).eventIndex;\n    }\n    /**\n     * Determines if the player pointer has reached the end of the loaded MIDI file.\n     * Used in two ways:\n     * 1. If playing result is based on loaded JSON events.\n     * 2. If parsing (dryRun) it's based on the actual buffer length vs bytes processed.\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"endOfFile\",\n    value: function endOfFile() {\n      if (this.isPlaying()) {\n        return this.totalTicks - this.tick <= 0;\n      }\n\n      return this.bytesProcessed() >= this.midiChunksByteLength; //this.buffer.length;\n    }\n    /**\n     * Gets the current tick number in playback.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getCurrentTick\",\n    value: function getCurrentTick() {\n      if (!this.startTime && this.tick) {\n        return this.startTick;\n      } else if (!this.startTime) {\n        return 0;\n      }\n\n      return Math.round((new Date().getTime() - this.startTime) / 1000 * (this.division * (this.tempo / 60))) + this.startTick;\n    }\n    /**\n     * Sends MIDI event out to listener.\n     * @param {object}\n     * @return {Player}\n     */\n\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(event) {\n      this.triggerPlayerEvent('midiEvent', event);\n      return this;\n    }\n    /**\n     * Subscribes events to listeners\n     * @param {string} - Name of event to subscribe to.\n     * @param {function} - Callback to fire when event is broadcast.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(playerEvent, fn) {\n      if (!this.eventListeners.hasOwnProperty(playerEvent)) this.eventListeners[playerEvent] = [];\n      this.eventListeners[playerEvent].push(fn);\n      return this;\n    }\n    /**\n     * Broadcasts event to trigger subscribed callbacks.\n     * @param {string} - Name of event.\n     * @param {object} - Data to be passed to subscriber callback.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"triggerPlayerEvent\",\n    value: function triggerPlayerEvent(playerEvent, data) {\n      if (this.eventListeners.hasOwnProperty(playerEvent)) this.eventListeners[playerEvent].forEach(function (fn) {\n        return fn(data || {});\n      });\n      return this;\n    }\n  }]);\n\n  return Player;\n}();\n\nvar index = {\n  Player: Player,\n  Utils: Utils,\n  Constants: Constants\n};\nexport default index;","map":{"version":3,"sources":["/Users/berkerbanar/Desktop/XAI_code/UI/xai_ui/node_modules/midi-player-js/build/index.browser.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","Constants","VERSION","NOTES","HEADER_CHUNK_LENGTH","CIRCLE_OF_FOURTHS","CIRCLE_OF_FIFTHS","allNotes","counter","_loop","forEach","noteGroup","note","Utils","value","byteToHex","_byte","toString","slice","bytesToHex","byteArray","hex","_byte2","push","join","hexToNumber","hexString","parseInt","bytesToNumber","bytesToLetters","letters","_byte3","String","fromCharCode","decToBinary","dec","getVarIntLength","currentByte","byteCount","readVarInt","result","number","b","_atob","atob","_x","apply","arguments","string","Buffer","Track","index","data","enabled","eventIndex","pointer","lastTick","lastStatus","delta","runningDelta","events","lastThreeBytes","subarray","reset","enable","disable","setEventIndexByTick","tick","getCurrentByte","getDeltaByteCount","getDelta","handleEvent","currentTick","dryRun","elapsedTicks","eventReady","_event","parseEvent","getStringData","eventStartIndex","varIntLength","varIntValue","eventJson","deltaByteCount","track","byteIndex","name","Math","round","tempo","timeSignature","pow","keySignature","abs","varQuantityByteLength","varQuantityByteValue","_varQuantityByteLength","_varQuantityByteValue","running","noteNumber","noteName","velocity","channel","pressure","event","concat","endOfTrack","Uint8Array","Array","Player","eventHandler","buffer","sampleRate","startTime","midiChunksByteLength","division","format","setIntervalId","tracks","instruments","defaultTempo","startTick","inLoop","totalTicks","totalEvents","eventListeners","on","loadFile","path","loadArrayBuffer","arrayBuffer","fileLoaded","loadDataUri","dataUri","byteString","split","ia","charCodeAt","getFilesize","validate","setTempo","getDivision","getFormat","getTracks","trackOffset","trackLength","trackChunksByteLength","enableTrack","trackNumber","disableTrack","playLoop","getCurrentTick","endOfFile","triggerPlayerEvent","stop","hasOwnProperty","includes","isPlaying","pause","play","emitEvent","setStartTime","Date","getTime","setInterval","bind","loop","setTimeout","clearInterval","resetTracks","skipToTick","skipToPercent","percent","skipToSeconds","seconds","songTime","getSongTime","getEvents","getTotalEvents","getTotalTicks","map","max","reduce","a","getSongTimeRemaining","getSongPercentRemaining","bytesProcessed","eventsPlayed","playerEvent","fn"],"mappings":"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","sourcesContent":["function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n/**\n * Constants used in player.\n */\nvar Constants = {\n  VERSION: '2.0.14',\n  NOTES: [],\n  HEADER_CHUNK_LENGTH: 14,\n  CIRCLE_OF_FOURTHS: ['C', 'F', 'Bb', 'Eb', 'Ab', 'Db', 'Gb', 'Cb', 'Fb', 'Bbb', 'Ebb', 'Abb'],\n  CIRCLE_OF_FIFTHS: ['C', 'G', 'D', 'A', 'E', 'B', 'F#', 'C#', 'G#', 'D#', 'A#', 'E#']\n}; // Builds notes object for reference against binary values.\n\nvar allNotes = [['C'], ['C#', 'Db'], ['D'], ['D#', 'Eb'], ['E'], ['F'], ['F#', 'Gb'], ['G'], ['G#', 'Ab'], ['A'], ['A#', 'Bb'], ['B']];\nvar counter = 0; // All available octaves.\n\nvar _loop = function _loop(i) {\n  allNotes.forEach(function (noteGroup) {\n    noteGroup.forEach(function (note) {\n      return Constants.NOTES[counter] = note + i;\n    });\n    counter++;\n  });\n};\n\nfor (var i = -1; i <= 9; i++) {\n  _loop(i);\n}\n\n/**\n * Contains misc static utility methods.\n */\nvar Utils = /*#__PURE__*/function () {\n  function Utils() {\n    _classCallCheck(this, Utils);\n  }\n\n  _createClass(Utils, null, [{\n    key: \"byteToHex\",\n\n    /**\n     * Converts a single byte to a hex string.\n     * @param {number} byte\n     * @return {string}\n     */\n    value: function byteToHex(_byte) {\n      // Ensure hex string always has two chars\n      return ('0' + _byte.toString(16)).slice(-2);\n    }\n    /**\n     * Converts an array of bytes to a hex string.\n     * @param {array} byteArray\n     * @return {string}\n     */\n\n  }, {\n    key: \"bytesToHex\",\n    value: function bytesToHex(byteArray) {\n      var hex = [];\n      byteArray.forEach(function (_byte2) {\n        return hex.push(Utils.byteToHex(_byte2));\n      });\n      return hex.join('');\n    }\n    /**\n     * Converts a hex string to a number.\n     * @param {string} hexString\n     * @return {number}\n     */\n\n  }, {\n    key: \"hexToNumber\",\n    value: function hexToNumber(hexString) {\n      return parseInt(hexString, 16);\n    }\n    /**\n     * Converts an array of bytes to a number.\n     * @param {array} byteArray\n     * @return {number}\n     */\n\n  }, {\n    key: \"bytesToNumber\",\n    value: function bytesToNumber(byteArray) {\n      return Utils.hexToNumber(Utils.bytesToHex(byteArray));\n    }\n    /**\n     * Converts an array of bytes to letters.\n     * @param {array} byteArray\n     * @return {string}\n     */\n\n  }, {\n    key: \"bytesToLetters\",\n    value: function bytesToLetters(byteArray) {\n      var letters = [];\n      byteArray.forEach(function (_byte3) {\n        return letters.push(String.fromCharCode(_byte3));\n      });\n      return letters.join('');\n    }\n    /**\n     * Converts a decimal to it's binary representation.\n     * @param {number} dec\n     * @return {string}\n     */\n\n  }, {\n    key: \"decToBinary\",\n    value: function decToBinary(dec) {\n      return (dec >>> 0).toString(2);\n    }\n    /**\n     * Determines the length in bytes of a variable length quaantity.  The first byte in given range is assumed to be beginning of var length quantity.\n     * @param {array} byteArray\n     * @return {number}\n     */\n\n  }, {\n    key: \"getVarIntLength\",\n    value: function getVarIntLength(byteArray) {\n      // Get byte count of delta VLV\n      // http://www.ccarh.org/courses/253/handout/vlv/\n      // If byte is greater or equal to 80h (128 decimal) then the next byte\n      // is also part of the VLV,\n      // else byte is the last byte in a VLV.\n      var currentByte = byteArray[0];\n      var byteCount = 1;\n\n      while (currentByte >= 128) {\n        currentByte = byteArray[byteCount];\n        byteCount++;\n      }\n\n      return byteCount;\n    }\n    /**\n     * Reads a variable length value.\n     * @param {array} byteArray\n     * @return {number}\n     */\n\n  }, {\n    key: \"readVarInt\",\n    value: function readVarInt(byteArray) {\n      var result = 0;\n      byteArray.forEach(function (number) {\n        var b = number;\n\n        if (b & 0x80) {\n          result += b & 0x7f;\n          result <<= 7;\n        } else {\n          /* b is the last byte */\n          result += b;\n        }\n      });\n      return result;\n    }\n    /**\n     * Decodes base-64 encoded string\n     * @param {string} string\n     * @return {string}\n     */\n\n  }, {\n    key: \"atob\",\n    value: function (_atob) {\n      function atob(_x) {\n        return _atob.apply(this, arguments);\n      }\n\n      atob.toString = function () {\n        return _atob.toString();\n      };\n\n      return atob;\n    }(function (string) {\n      if (typeof atob === 'function') return atob(string);\n      return new Buffer(string, 'base64').toString('binary');\n    })\n  }]);\n\n  return Utils;\n}();\n\n/**\n * Class representing a track.  Contains methods for parsing events and keeping track of pointer.\n */\n\nvar Track = /*#__PURE__*/function () {\n  function Track(index, data) {\n    _classCallCheck(this, Track);\n\n    this.enabled = true;\n    this.eventIndex = 0;\n    this.pointer = 0;\n    this.lastTick = 0;\n    this.lastStatus = null;\n    this.index = index;\n    this.data = data;\n    this.delta = 0;\n    this.runningDelta = 0;\n    this.events = []; // Ensure last 3 bytes of track are End of Track event\n\n    var lastThreeBytes = this.data.subarray(this.data.length - 3, this.data.length);\n\n    if (!(lastThreeBytes[0] === 0xff && lastThreeBytes[1] === 0x2f && lastThreeBytes[2] === 0x00)) {\n      throw 'Invalid MIDI file; Last three bytes of track ' + this.index + 'must be FF 2F 00 to mark end of track';\n    }\n  }\n  /**\n   * Resets all stateful track informaion used during playback.\n   * @return {Track}\n   */\n\n\n  _createClass(Track, [{\n    key: \"reset\",\n    value: function reset() {\n      this.enabled = true;\n      this.eventIndex = 0;\n      this.pointer = 0;\n      this.lastTick = 0;\n      this.lastStatus = null;\n      this.delta = 0;\n      this.runningDelta = 0;\n      return this;\n    }\n    /**\n     * Sets this track to be enabled during playback.\n     * @return {Track}\n     */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      this.enabled = true;\n      return this;\n    }\n    /**\n     * Sets this track to be disabled during playback.\n     * @return {Track}\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.enabled = false;\n      return this;\n    }\n    /**\n     * Sets the track event index to the nearest event to the given tick.\n     * @param {number} tick\n     * @return {Track}\n     */\n\n  }, {\n    key: \"setEventIndexByTick\",\n    value: function setEventIndexByTick(tick) {\n      tick = tick || 0;\n\n      for (var i in this.events) {\n        if (this.events[i].tick >= tick) {\n          this.eventIndex = i;\n          return this;\n        }\n      }\n    }\n    /**\n     * Gets byte located at pointer position.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getCurrentByte\",\n    value: function getCurrentByte() {\n      return this.data[this.pointer];\n    }\n    /**\n     * Gets count of delta bytes and current pointer position.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getDeltaByteCount\",\n    value: function getDeltaByteCount() {\n      return Utils.getVarIntLength(this.data.subarray(this.pointer));\n    }\n    /**\n     * Get delta value at current pointer position.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getDelta\",\n    value: function getDelta() {\n      return Utils.readVarInt(this.data.subarray(this.pointer, this.pointer + this.getDeltaByteCount()));\n    }\n    /**\n     * Handles event within a given track starting at specified index\n     * @param {number} currentTick\n     * @param {boolean} dryRun - If true events will be parsed and returned regardless of time.\n     */\n\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(currentTick, dryRun) {\n      dryRun = dryRun || false;\n\n      if (dryRun) {\n        var elapsedTicks = currentTick - this.lastTick;\n        var delta = this.getDelta();\n        var eventReady = elapsedTicks >= delta;\n\n        if (this.pointer < this.data.length && (dryRun || eventReady)) {\n          var _event = this.parseEvent();\n\n          if (this.enabled) return _event; // Recursively call this function for each event ahead that has 0 delta time?\n        }\n      } else {\n        // Let's actually play the MIDI from the generated JSON events created by the dry run.\n        if (this.events[this.eventIndex] && this.events[this.eventIndex].tick <= currentTick) {\n          this.eventIndex++;\n          if (this.enabled) return this.events[this.eventIndex - 1];\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Get string data from event.\n     * @param {number} eventStartIndex\n     * @return {string}\n     */\n\n  }, {\n    key: \"getStringData\",\n    value: function getStringData(eventStartIndex) {\n      var varIntLength = Utils.getVarIntLength(this.data.subarray(eventStartIndex + 2));\n      var varIntValue = Utils.readVarInt(this.data.subarray(eventStartIndex + 2, eventStartIndex + 2 + varIntLength));\n      var letters = Utils.bytesToLetters(this.data.subarray(eventStartIndex + 2 + varIntLength, eventStartIndex + 2 + varIntLength + varIntValue));\n      return letters;\n    }\n    /**\n     * Parses event into JSON and advances pointer for the track\n     * @return {object}\n     */\n\n  }, {\n    key: \"parseEvent\",\n    value: function parseEvent() {\n      var eventStartIndex = this.pointer + this.getDeltaByteCount();\n      var eventJson = {};\n      var deltaByteCount = this.getDeltaByteCount();\n      eventJson.track = this.index + 1;\n      eventJson.delta = this.getDelta();\n      this.lastTick = this.lastTick + eventJson.delta;\n      this.runningDelta += eventJson.delta;\n      eventJson.tick = this.runningDelta;\n      eventJson.byteIndex = this.pointer; //eventJson.raw = event;\n\n      if (this.data[eventStartIndex] == 0xff) {\n        // Meta Event\n        // If this is a meta event we should emit the data and immediately move to the next event\n        // otherwise if we let it run through the next cycle a slight delay will accumulate if multiple tracks\n        // are being played simultaneously\n        switch (this.data[eventStartIndex + 1]) {\n          case 0x00:\n            // Sequence Number\n            eventJson.name = 'Sequence Number';\n            break;\n\n          case 0x01:\n            // Text Event\n            eventJson.name = 'Text Event';\n            eventJson.string = this.getStringData(eventStartIndex);\n            break;\n\n          case 0x02:\n            // Copyright Notice\n            eventJson.name = 'Copyright Notice';\n            break;\n\n          case 0x03:\n            // Sequence/Track Name\n            eventJson.name = 'Sequence/Track Name';\n            eventJson.string = this.getStringData(eventStartIndex);\n            break;\n\n          case 0x04:\n            // Instrument Name\n            eventJson.name = 'Instrument Name';\n            eventJson.string = this.getStringData(eventStartIndex);\n            break;\n\n          case 0x05:\n            // Lyric\n            eventJson.name = 'Lyric';\n            eventJson.string = this.getStringData(eventStartIndex);\n            break;\n\n          case 0x06:\n            // Marker\n            eventJson.name = 'Marker';\n            break;\n\n          case 0x07:\n            // Cue Point\n            eventJson.name = 'Cue Point';\n            eventJson.string = this.getStringData(eventStartIndex);\n            break;\n\n          case 0x09:\n            // Device Name\n            eventJson.name = 'Device Name';\n            eventJson.string = this.getStringData(eventStartIndex);\n            break;\n\n          case 0x20:\n            // MIDI Channel Prefix\n            eventJson.name = 'MIDI Channel Prefix';\n            break;\n\n          case 0x21:\n            // MIDI Port\n            eventJson.name = 'MIDI Port';\n            eventJson.data = Utils.bytesToNumber([this.data[eventStartIndex + 3]]);\n            break;\n\n          case 0x2F:\n            // End of Track\n            eventJson.name = 'End of Track';\n            break;\n\n          case 0x51:\n            // Set Tempo\n            eventJson.name = 'Set Tempo';\n            eventJson.data = Math.round(60000000 / Utils.bytesToNumber(this.data.subarray(eventStartIndex + 3, eventStartIndex + 6)));\n            this.tempo = eventJson.data;\n            break;\n\n          case 0x54:\n            // SMTPE Offset\n            eventJson.name = 'SMTPE Offset';\n            break;\n\n          case 0x58:\n            // Time Signature\n            // FF 58 04 nn dd cc bb\n            eventJson.name = 'Time Signature';\n            eventJson.data = this.data.subarray(eventStartIndex + 3, eventStartIndex + 7);\n            eventJson.timeSignature = \"\" + eventJson.data[0] + \"/\" + Math.pow(2, eventJson.data[1]);\n            break;\n\n          case 0x59:\n            // Key Signature\n            // FF 59 02 sf mi\n            eventJson.name = 'Key Signature';\n            eventJson.data = this.data.subarray(eventStartIndex + 3, eventStartIndex + 5);\n\n            if (eventJson.data[0] >= 0) {\n              eventJson.keySignature = Constants.CIRCLE_OF_FIFTHS[eventJson.data[0]];\n            } else if (eventJson.data[0] < 0) {\n              eventJson.keySignature = Constants.CIRCLE_OF_FOURTHS[Math.abs(eventJson.data[0])];\n            }\n\n            if (eventJson.data[1] == 0) {\n              eventJson.keySignature += \" Major\";\n            } else if (eventJson.data[1] == 1) {\n              eventJson.keySignature += \" Minor\";\n            }\n\n            break;\n\n          case 0x7F:\n            // Sequencer-Specific Meta-event\n            eventJson.name = 'Sequencer-Specific Meta-event';\n            break;\n\n          default:\n            eventJson.name = 'Unknown: ' + this.data[eventStartIndex + 1].toString(16);\n            break;\n        }\n\n        var varIntLength = Utils.getVarIntLength(this.data.subarray(eventStartIndex + 2));\n        var length = Utils.readVarInt(this.data.subarray(eventStartIndex + 2, eventStartIndex + 2 + varIntLength)); //console.log(eventJson);\n\n        this.pointer += deltaByteCount + 3 + length; //console.log(eventJson);\n      } else if (this.data[eventStartIndex] === 0xf0) {\n        // Sysex\n        eventJson.name = 'Sysex';\n        var varQuantityByteLength = Utils.getVarIntLength(this.data.subarray(eventStartIndex + 1));\n        var varQuantityByteValue = Utils.readVarInt(this.data.subarray(eventStartIndex + 1, eventStartIndex + 1 + varQuantityByteLength));\n        eventJson.data = this.data.subarray(eventStartIndex + 1 + varQuantityByteLength, eventStartIndex + 1 + varQuantityByteLength + varQuantityByteValue);\n        this.pointer += deltaByteCount + 1 + varQuantityByteLength + varQuantityByteValue;\n      } else if (this.data[eventStartIndex] === 0xf7) {\n        // Sysex (escape)\n        // http://www.somascape.org/midi/tech/mfile.html#sysex\n        eventJson.name = 'Sysex (escape)';\n\n        var _varQuantityByteLength = Utils.getVarIntLength(this.data.subarray(eventStartIndex + 1));\n\n        var _varQuantityByteValue = Utils.readVarInt(this.data.subarray(eventStartIndex + 1, eventStartIndex + 1 + _varQuantityByteLength));\n\n        eventJson.data = this.data.subarray(eventStartIndex + 1 + _varQuantityByteLength, eventStartIndex + 1 + _varQuantityByteLength + _varQuantityByteValue);\n        this.pointer += deltaByteCount + 1 + _varQuantityByteLength + _varQuantityByteValue;\n      } else {\n        // Voice event\n        if (this.data[eventStartIndex] < 0x80) {\n          // Running status\n          eventJson.running = true;\n          eventJson.noteNumber = this.data[eventStartIndex];\n          eventJson.noteName = Constants.NOTES[this.data[eventStartIndex]];\n          eventJson.velocity = this.data[eventStartIndex + 1];\n\n          if (this.lastStatus <= 0x8f) {\n            eventJson.name = 'Note off';\n            eventJson.channel = this.lastStatus - 0x80 + 1;\n            this.pointer += deltaByteCount + 2;\n          } else if (this.lastStatus <= 0x9f) {\n            eventJson.name = 'Note on';\n            eventJson.channel = this.lastStatus - 0x90 + 1;\n            this.pointer += deltaByteCount + 2;\n          } else if (this.lastStatus <= 0xaf) {\n            // Polyphonic Key Pressure\n            eventJson.name = 'Polyphonic Key Pressure';\n            eventJson.channel = this.lastStatus - 0xa0 + 1;\n            eventJson.note = Constants.NOTES[this.data[eventStartIndex + 1]];\n            eventJson.pressure = event[1];\n            this.pointer += deltaByteCount + 2;\n          } else if (this.lastStatus <= 0xbf) {\n            // Controller Change\n            eventJson.name = 'Controller Change';\n            eventJson.channel = this.lastStatus - 0xb0 + 1;\n            eventJson.number = this.data[eventStartIndex + 1];\n            eventJson.value = this.data[eventStartIndex + 2];\n            this.pointer += deltaByteCount + 2;\n          } else if (this.lastStatus <= 0xcf) {\n            // Program Change\n            eventJson.name = 'Program Change';\n            eventJson.channel = this.lastStatus - 0xc0 + 1;\n            eventJson.value = this.data[eventStartIndex + 1];\n            this.pointer += deltaByteCount + 1;\n          } else if (this.lastStatus <= 0xdf) {\n            // Channel Key Pressure\n            eventJson.name = 'Channel Key Pressure';\n            eventJson.channel = this.lastStatus - 0xd0 + 1;\n            this.pointer += deltaByteCount + 1;\n          } else if (this.lastStatus <= 0xef) {\n            // Pitch Bend\n            eventJson.name = 'Pitch Bend';\n            eventJson.channel = this.lastStatus - 0xe0 + 1;\n            this.pointer += deltaByteCount + 2;\n          } else {\n            throw \"Unknown event (running): \".concat(this.lastStatus);\n          }\n        } else {\n          this.lastStatus = this.data[eventStartIndex];\n\n          if (this.data[eventStartIndex] <= 0x8f) {\n            // Note off\n            eventJson.name = 'Note off';\n            eventJson.channel = this.lastStatus - 0x80 + 1;\n            eventJson.noteNumber = this.data[eventStartIndex + 1];\n            eventJson.noteName = Constants.NOTES[this.data[eventStartIndex + 1]];\n            eventJson.velocity = Math.round(this.data[eventStartIndex + 2] / 127 * 100);\n            this.pointer += deltaByteCount + 3;\n          } else if (this.data[eventStartIndex] <= 0x9f) {\n            // Note on\n            eventJson.name = 'Note on';\n            eventJson.channel = this.lastStatus - 0x90 + 1;\n            eventJson.noteNumber = this.data[eventStartIndex + 1];\n            eventJson.noteName = Constants.NOTES[this.data[eventStartIndex + 1]];\n            eventJson.velocity = Math.round(this.data[eventStartIndex + 2] / 127 * 100);\n            this.pointer += deltaByteCount + 3;\n          } else if (this.data[eventStartIndex] <= 0xaf) {\n            // Polyphonic Key Pressure\n            eventJson.name = 'Polyphonic Key Pressure';\n            eventJson.channel = this.lastStatus - 0xa0 + 1;\n            eventJson.note = Constants.NOTES[this.data[eventStartIndex + 1]];\n            eventJson.pressure = event[2];\n            this.pointer += deltaByteCount + 3;\n          } else if (this.data[eventStartIndex] <= 0xbf) {\n            // Controller Change\n            eventJson.name = 'Controller Change';\n            eventJson.channel = this.lastStatus - 0xb0 + 1;\n            eventJson.number = this.data[eventStartIndex + 1];\n            eventJson.value = this.data[eventStartIndex + 2];\n            this.pointer += deltaByteCount + 3;\n          } else if (this.data[eventStartIndex] <= 0xcf) {\n            // Program Change\n            eventJson.name = 'Program Change';\n            eventJson.channel = this.lastStatus - 0xc0 + 1;\n            eventJson.value = this.data[eventStartIndex + 1];\n            this.pointer += deltaByteCount + 2;\n          } else if (this.data[eventStartIndex] <= 0xdf) {\n            // Channel Key Pressure\n            eventJson.name = 'Channel Key Pressure';\n            eventJson.channel = this.lastStatus - 0xd0 + 1;\n            this.pointer += deltaByteCount + 2;\n          } else if (this.data[eventStartIndex] <= 0xef) {\n            // Pitch Bend\n            eventJson.name = 'Pitch Bend';\n            eventJson.channel = this.lastStatus - 0xe0 + 1;\n            this.pointer += deltaByteCount + 3;\n          } else {\n            throw \"Unknown event: \".concat(this.data[eventStartIndex]); //eventJson.name = `Unknown.  Pointer: ${this.pointer.toString()}, ${eventStartIndex.toString()}, ${this.data[eventStartIndex]}, ${this.data.length}`;\n          }\n        }\n      }\n\n      this.delta += eventJson.delta;\n      this.events.push(eventJson);\n      return eventJson;\n    }\n    /**\n     * Returns true if pointer has reached the end of the track.\n     * @param {boolean}\n     */\n\n  }, {\n    key: \"endOfTrack\",\n    value: function endOfTrack() {\n      if (this.data[this.pointer + 1] == 0xff && this.data[this.pointer + 2] == 0x2f && this.data[this.pointer + 3] == 0x00) {\n        return true;\n      }\n\n      return false;\n    }\n  }]);\n\n  return Track;\n}();\n\nif (!Uint8Array.prototype.forEach) {\n  Object.defineProperty(Uint8Array.prototype, 'forEach', {\n    value: Array.prototype.forEach\n  });\n}\n/**\n * Main player class.  Contains methods to load files, start, stop.\n * @param {function} - Callback to fire for each MIDI event.  Can also be added with on('midiEvent', fn)\n * @param {array} - Array buffer of MIDI file (optional).\n */\n\n\nvar Player = /*#__PURE__*/function () {\n  function Player(eventHandler, buffer) {\n    _classCallCheck(this, Player);\n\n    this.sampleRate = 5; // milliseconds\n\n    this.startTime = 0;\n    this.buffer = buffer || null;\n    this.midiChunksByteLength = null;\n    this.division;\n    this.format;\n    this.setIntervalId = false;\n    this.tracks = [];\n    this.instruments = [];\n    this.defaultTempo = 120;\n    this.tempo = null;\n    this.startTick = 0;\n    this.tick = 0;\n    this.lastTick = null;\n    this.inLoop = false;\n    this.totalTicks = 0;\n    this.events = [];\n    this.totalEvents = 0;\n    this.eventListeners = {};\n    if (typeof eventHandler === 'function') this.on('midiEvent', eventHandler);\n  }\n  /**\n   * Load a file into the player (Node.js only).\n   * @param {string} path - Path of file.\n   * @return {Player}\n   */\n\n\n  _createClass(Player, [{\n    key: \"loadFile\",\n    value: function loadFile(path) {\n      {\n        throw 'loadFile is only supported on Node.js';\n      }\n    }\n    /**\n     * Load an array buffer into the player.\n     * @param {array} arrayBuffer - Array buffer of file to be loaded.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"loadArrayBuffer\",\n    value: function loadArrayBuffer(arrayBuffer) {\n      this.buffer = new Uint8Array(arrayBuffer);\n      return this.fileLoaded();\n    }\n    /**\n     * Load a data URI into the player.\n     * @param {string} dataUri - Data URI to be loaded.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"loadDataUri\",\n    value: function loadDataUri(dataUri) {\n      // convert base64 to raw binary data held in a string.\n      // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this\n      var byteString = Utils.atob(dataUri.split(',')[1]); // write the bytes of the string to an ArrayBuffer\n\n      var ia = new Uint8Array(byteString.length);\n\n      for (var i = 0; i < byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i);\n      }\n\n      this.buffer = ia;\n      return this.fileLoaded();\n    }\n    /**\n     * Get filesize of loaded file in number of bytes.\n     * @return {number} - The filesize.\n     */\n\n  }, {\n    key: \"getFilesize\",\n    value: function getFilesize() {\n      return this.buffer ? this.buffer.length : 0;\n    }\n    /**\n     * Sets default tempo, parses file for necessary information, and does a dry run to calculate total length.\n     * Populates this.events & this.totalTicks.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"fileLoaded\",\n    value: function fileLoaded() {\n      if (!this.validate()) throw 'Invalid MIDI file; should start with MThd';\n      return this.setTempo(this.defaultTempo).getDivision().getFormat().getTracks().dryRun();\n    }\n    /**\n     * Validates file using simple means - first four bytes should == MThd.\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      //console.log((this.buffer.subarray(0, 15)));\n      return Utils.bytesToLetters(this.buffer.subarray(0, 4)) === 'MThd';\n    }\n    /**\n     * Gets MIDI file format for loaded file.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"getFormat\",\n    value: function getFormat() {\n      /*\n      MIDI files come in 3 variations:\n      Format 0 which contain a single track\n      Format 1 which contain one or more simultaneous tracks\n      (ie all tracks are to be played simultaneously).\n      Format 2 which contain one or more independant tracks\n      (ie each track is to be played independantly of the others).\n      return Utils.bytesToNumber(this.buffer.subarray(8, 10));\n      */\n      this.format = Utils.bytesToNumber(this.buffer.subarray(8, 10));\n      return this;\n    }\n    /**\n     * Parses out tracks, places them in this.tracks and initializes this.pointers\n     * @return {Player}\n     */\n\n  }, {\n    key: \"getTracks\",\n    value: function getTracks() {\n      this.tracks = [];\n      var trackOffset = 0;\n\n      while (trackOffset < this.buffer.length) {\n        if (Utils.bytesToLetters(this.buffer.subarray(trackOffset, trackOffset + 4)) == 'MTrk') {\n          var trackLength = Utils.bytesToNumber(this.buffer.subarray(trackOffset + 4, trackOffset + 8));\n          this.tracks.push(new Track(this.tracks.length, this.buffer.subarray(trackOffset + 8, trackOffset + 8 + trackLength)));\n        }\n\n        trackOffset += Utils.bytesToNumber(this.buffer.subarray(trackOffset + 4, trackOffset + 8)) + 8;\n      } // Get sum of all MIDI chunks here while we're at it\n\n\n      var trackChunksByteLength = 0;\n      this.tracks.forEach(function (track) {\n        trackChunksByteLength += 8 + track.data.length;\n      });\n      this.midiChunksByteLength = Constants.HEADER_CHUNK_LENGTH + trackChunksByteLength;\n      return this;\n    }\n    /**\n     * Enables a track for playing.\n     * @param {number} trackNumber - Track number\n     * @return {Player}\n     */\n\n  }, {\n    key: \"enableTrack\",\n    value: function enableTrack(trackNumber) {\n      this.tracks[trackNumber - 1].enable();\n      return this;\n    }\n    /**\n     * Disables a track for playing.\n     * @param {number} - Track number\n     * @return {Player}\n     */\n\n  }, {\n    key: \"disableTrack\",\n    value: function disableTrack(trackNumber) {\n      this.tracks[trackNumber - 1].disable();\n      return this;\n    }\n    /**\n     * Gets quarter note division of loaded MIDI file.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"getDivision\",\n    value: function getDivision() {\n      this.division = Utils.bytesToNumber(this.buffer.subarray(12, Constants.HEADER_CHUNK_LENGTH));\n      return this;\n    }\n    /**\n     * The main play loop.\n     * @param {boolean} - Indicates whether or not this is being called simply for parsing purposes.  Disregards timing if so.\n     * @return {undefined}\n     */\n\n  }, {\n    key: \"playLoop\",\n    value: function playLoop(dryRun) {\n      if (!this.inLoop) {\n        this.inLoop = true;\n        this.tick = this.getCurrentTick();\n        this.tracks.forEach(function (track, index) {\n          // Handle next event\n          if (!dryRun && this.endOfFile()) {\n            //console.log('end of file')\n            this.triggerPlayerEvent('endOfFile');\n            this.stop();\n          } else {\n            var event = track.handleEvent(this.tick, dryRun);\n\n            if (dryRun && event) {\n              if (event.hasOwnProperty('name') && event.name === 'Set Tempo') {\n                // Grab tempo if available.\n                this.defaultTempo = event.data;\n                this.setTempo(event.data);\n              }\n\n              if (event.hasOwnProperty('name') && event.name === 'Program Change') {\n                if (!this.instruments.includes(event.value)) {\n                  this.instruments.push(event.value);\n                }\n              }\n            } else if (event) {\n              if (event.hasOwnProperty('name') && event.name === 'Set Tempo') {\n                // Grab tempo if available.\n                this.setTempo(event.data);\n\n                if (this.isPlaying()) {\n                  this.pause().play();\n                }\n              }\n\n              this.emitEvent(event);\n            }\n          }\n        }, this);\n        if (!dryRun) this.triggerPlayerEvent('playing', {\n          tick: this.tick\n        });\n        this.inLoop = false;\n      }\n    }\n    /**\n     * Setter for tempo.\n     * @param {number} - Tempo in bpm (defaults to 120)\n     */\n\n  }, {\n    key: \"setTempo\",\n    value: function setTempo(tempo) {\n      this.tempo = tempo;\n      return this;\n    }\n    /**\n     * Setter for startTime.\n     * @param {number} - UTC timestamp\n     * @return {Player}\n     */\n\n  }, {\n    key: \"setStartTime\",\n    value: function setStartTime(startTime) {\n      this.startTime = startTime;\n      return this;\n    }\n    /**\n     * Start playing loaded MIDI file if not already playing.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"play\",\n    value: function play() {\n      if (this.isPlaying()) throw 'Already playing...'; // Initialize\n\n      if (!this.startTime) this.startTime = new Date().getTime(); // Start play loop\n      //window.requestAnimationFrame(this.playLoop.bind(this));\n\n      this.setIntervalId = setInterval(this.playLoop.bind(this), this.sampleRate); //this.setIntervalId = this.loop();\n\n      return this;\n    }\n  }, {\n    key: \"loop\",\n    value: function loop() {\n      setTimeout(function () {\n        // Do Something Here\n        this.playLoop(); // Then recall the parent function to\n        // create a recursive loop.\n\n        this.loop();\n      }.bind(this), this.sampleRate);\n    }\n    /**\n     * Pauses playback if playing.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      clearInterval(this.setIntervalId);\n      this.setIntervalId = false;\n      this.startTick = this.tick;\n      this.startTime = 0;\n      return this;\n    }\n    /**\n     * Stops playback if playing.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      clearInterval(this.setIntervalId);\n      this.setIntervalId = false;\n      this.startTick = 0;\n      this.startTime = 0;\n      this.resetTracks();\n      return this;\n    }\n    /**\n     * Skips player pointer to specified tick.\n     * @param {number} - Tick to skip to.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"skipToTick\",\n    value: function skipToTick(tick) {\n      this.stop();\n      this.startTick = tick; // Need to set track event indexes to the nearest possible event to the specified tick.\n\n      this.tracks.forEach(function (track) {\n        track.setEventIndexByTick(tick);\n      });\n      return this;\n    }\n    /**\n     * Skips player pointer to specified percentage.\n     * @param {number} - Percent value in integer format.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"skipToPercent\",\n    value: function skipToPercent(percent) {\n      if (percent < 0 || percent > 100) throw \"Percent must be number between 1 and 100.\";\n      this.skipToTick(Math.round(percent / 100 * this.totalTicks));\n      return this;\n    }\n    /**\n     * Skips player pointer to specified seconds.\n     * @param {number} - Seconds to skip to.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"skipToSeconds\",\n    value: function skipToSeconds(seconds) {\n      var songTime = this.getSongTime();\n      if (seconds < 0 || seconds > songTime) throw seconds + \" seconds not within song time of \" + songTime;\n      this.skipToPercent(seconds / songTime * 100);\n      return this;\n    }\n    /**\n     * Checks if player is playing\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isPlaying\",\n    value: function isPlaying() {\n      return this.setIntervalId > 0 || _typeof(this.setIntervalId) === 'object';\n    }\n    /**\n     * Plays the loaded MIDI file without regard for timing and saves events in this.events.  Essentially used as a parser.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"dryRun\",\n    value: function dryRun() {\n      // Reset tracks first\n      this.resetTracks();\n\n      while (!this.endOfFile()) {\n        this.playLoop(true); //console.log(this.bytesProcessed(), this.midiChunksByteLength);\n      }\n\n      this.events = this.getEvents();\n      this.totalEvents = this.getTotalEvents();\n      this.totalTicks = this.getTotalTicks();\n      this.startTick = 0;\n      this.startTime = 0; // Leave tracks in pristine condish\n\n      this.resetTracks(); //console.log('Song time: ' + this.getSongTime() + ' seconds / ' + this.totalTicks + ' ticks.');\n\n      this.triggerPlayerEvent('fileLoaded', this);\n      return this;\n    }\n    /**\n     * Resets play pointers for all tracks.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"resetTracks\",\n    value: function resetTracks() {\n      this.tracks.forEach(function (track) {\n        return track.reset();\n      });\n      return this;\n    }\n    /**\n     * Gets an array of events grouped by track.\n     * @return {array}\n     */\n\n  }, {\n    key: \"getEvents\",\n    value: function getEvents() {\n      return this.tracks.map(function (track) {\n        return track.events;\n      });\n    }\n    /**\n     * Gets total number of ticks in the loaded MIDI file.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getTotalTicks\",\n    value: function getTotalTicks() {\n      return Math.max.apply(null, this.tracks.map(function (track) {\n        return track.delta;\n      }));\n    }\n    /**\n     * Gets total number of events in the loaded MIDI file.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getTotalEvents\",\n    value: function getTotalEvents() {\n      return this.tracks.reduce(function (a, b) {\n        return {\n          events: {\n            length: a.events.length + b.events.length\n          }\n        };\n      }, {\n        events: {\n          length: 0\n        }\n      }).events.length;\n    }\n    /**\n     * Gets song duration in seconds.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getSongTime\",\n    value: function getSongTime() {\n      return this.totalTicks / this.division / this.tempo * 60;\n    }\n    /**\n     * Gets remaining number of seconds in playback.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getSongTimeRemaining\",\n    value: function getSongTimeRemaining() {\n      return Math.round((this.totalTicks - this.getCurrentTick()) / this.division / this.tempo * 60);\n    }\n    /**\n     * Gets remaining percent of playback.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getSongPercentRemaining\",\n    value: function getSongPercentRemaining() {\n      return Math.round(this.getSongTimeRemaining() / this.getSongTime() * 100);\n    }\n    /**\n     * Number of bytes processed in the loaded MIDI file.\n     * @return {number}\n     */\n\n  }, {\n    key: \"bytesProcessed\",\n    value: function bytesProcessed() {\n      return Constants.HEADER_CHUNK_LENGTH + this.tracks.length * 8 + this.tracks.reduce(function (a, b) {\n        return {\n          pointer: a.pointer + b.pointer\n        };\n      }, {\n        pointer: 0\n      }).pointer;\n    }\n    /**\n     * Number of events played up to this point.\n     * @return {number}\n     */\n\n  }, {\n    key: \"eventsPlayed\",\n    value: function eventsPlayed() {\n      return this.tracks.reduce(function (a, b) {\n        return {\n          eventIndex: a.eventIndex + b.eventIndex\n        };\n      }, {\n        eventIndex: 0\n      }).eventIndex;\n    }\n    /**\n     * Determines if the player pointer has reached the end of the loaded MIDI file.\n     * Used in two ways:\n     * 1. If playing result is based on loaded JSON events.\n     * 2. If parsing (dryRun) it's based on the actual buffer length vs bytes processed.\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"endOfFile\",\n    value: function endOfFile() {\n      if (this.isPlaying()) {\n        return this.totalTicks - this.tick <= 0;\n      }\n\n      return this.bytesProcessed() >= this.midiChunksByteLength; //this.buffer.length;\n    }\n    /**\n     * Gets the current tick number in playback.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getCurrentTick\",\n    value: function getCurrentTick() {\n      if (!this.startTime && this.tick) {\n        return this.startTick;\n      } else if (!this.startTime) {\n        return 0;\n      }\n\n      return Math.round((new Date().getTime() - this.startTime) / 1000 * (this.division * (this.tempo / 60))) + this.startTick;\n    }\n    /**\n     * Sends MIDI event out to listener.\n     * @param {object}\n     * @return {Player}\n     */\n\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(event) {\n      this.triggerPlayerEvent('midiEvent', event);\n      return this;\n    }\n    /**\n     * Subscribes events to listeners\n     * @param {string} - Name of event to subscribe to.\n     * @param {function} - Callback to fire when event is broadcast.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(playerEvent, fn) {\n      if (!this.eventListeners.hasOwnProperty(playerEvent)) this.eventListeners[playerEvent] = [];\n      this.eventListeners[playerEvent].push(fn);\n      return this;\n    }\n    /**\n     * Broadcasts event to trigger subscribed callbacks.\n     * @param {string} - Name of event.\n     * @param {object} - Data to be passed to subscriber callback.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"triggerPlayerEvent\",\n    value: function triggerPlayerEvent(playerEvent, data) {\n      if (this.eventListeners.hasOwnProperty(playerEvent)) this.eventListeners[playerEvent].forEach(function (fn) {\n        return fn(data || {});\n      });\n      return this;\n    }\n  }]);\n\n  return Player;\n}();\n\nvar index = {\n  Player: Player,\n  Utils: Utils,\n  Constants: Constants\n};\n\nexport default index;\n"]},"metadata":{},"sourceType":"module"}